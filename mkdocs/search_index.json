{
    "docs": [
        {
            "location": "/",
            "text": "Trickster\n\n\n \n \n \n\n\nSocialize:\n\n\n \n\n\n\n\nOverview to Trickster\n\n\nWhy Trickster?\n\n\nInstallation\n\n\nRequirements\n\n\nUsage\n\n\nService Provider\n\n\nFacade\n\n\nConfiguration\n\n\nReady, Steady, GO!\n\n\n\n\n\n\nTrickster\u2019s Tricks\n\n\nTruncator\n\n\nEmail Validator\n\n\nSlug Converter\n\n\nYouTube Embed\n\n\nGravatar Grabber\n\n\nExtension Splitter\n\n\nSimple Social Analytics\n\n\nBB Code Engine\n\n\nTags Sweeper\n\n\nTime Ago\n\n\nCipher\n\n\nVimeo Video Embed\n\n\nVideo Info Grabber\n\n\nWikipedia Grabber\n\n\nURL Shortener\n\n\nSuggest\n\n\nIP Grabber\n\n\nCurrency Converter\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Trickster?\n\n\n\n\nTrickster is an Laravel package that makes Laravel Fun.\n\n\nTrickster provides tricks that makes coding with Laravel easy.\n\n\nWith \nTrickster\n inside your \nLaravel framework\n, your app will become a \nGambit\n. :-P\n\n\n\n\nInstallation\n\n\nInstalling Trickster is easy. Just type the command:\n\ncomposer require secrethash/trickster\n\n\nRequirements\n\n\n\n\nLaravel 5.x\n\n\ncURL\n\n\nPHP 5.4.x",
            "title": "Home"
        },
        {
            "location": "/#trickster",
            "text": "Socialize:      Overview to Trickster  Why Trickster?  Installation  Requirements  Usage  Service Provider  Facade  Configuration  Ready, Steady, GO!    Trickster\u2019s Tricks  Truncator  Email Validator  Slug Converter  YouTube Embed  Gravatar Grabber  Extension Splitter  Simple Social Analytics  BB Code Engine  Tags Sweeper  Time Ago  Cipher  Vimeo Video Embed  Video Info Grabber  Wikipedia Grabber  URL Shortener  Suggest  IP Grabber  Currency Converter",
            "title": "Trickster"
        },
        {
            "location": "/#why-trickster",
            "text": "Trickster is an Laravel package that makes Laravel Fun.  Trickster provides tricks that makes coding with Laravel easy.  With  Trickster  inside your  Laravel framework , your app will become a  Gambit . :-P",
            "title": "Why Trickster?"
        },
        {
            "location": "/#installation",
            "text": "Installing Trickster is easy. Just type the command: composer require secrethash/trickster",
            "title": "Installation"
        },
        {
            "location": "/#requirements",
            "text": "Laravel 5.x  cURL  PHP 5.4.x",
            "title": "Requirements"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nTo start using \nTrickster\n, you will be needed to set it up first. Follow the below steps to setup \nTrickster\n:\n\n\n1. Service Provider\n\n\nYou will be needing to add the Trickster Service Provider in your \napp.php\n which is inside the \nconfig\n directory.\n\n\n\n\nOpen \nconfig\\app.php\n\n\nFind \n'providers'\n\n\nAt the last of this array in \nApplication Service Providers\n add \nSecrethash\\Trickster\\TricksterServiceProvider::class,\n\n\n\n\n2. Facade\n\n\nTo use \nTrickster\n flexibly, you need to add the Facade also. Facade will let you use Trickster directly. All you will need to do is add \nuse Trickster;\n at the head of the controller below namespace and use it by \nTrickster::trickName();\n\n\nLets Add the \nTrickster\n Facade:\n\n\n\n\nOpen \nconfig\\app.php\n\n\nFind \n'aliases'\n array.\n\n\nAt the end of this array, add \n'Trickster' => Secrethash\\Trickster\\Facade\\Trickster::class,\n\n\n\n\n3. Configuration\n\n\nFirst of all you will need to run the following command in your console:\n\nphp artisan vendor:publish --provider=\"Secrethash\\Trickster\\TricksterServiceProvider\"\n\n\n\n\nThis command will publish the \ntrickster.php\n configuration file for Trickster to your application default \nconfig\n directory.\n\n\n\n\nFrom \nconfig\\trickster.php\n you can edit the default configurations.\n\n\n4. Ready, Steady, GO!\n\n\nYou are almost done. Now what to do when you want to use a Trickster's Trick?\n\n\nHere is a sample Controller to show you how to add Trickster and Use it:\n\n\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\n\nuse Auth;\nuse Trickster; // Simply add the Facade\n\nclass TricksterDemoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //checking if the user is Authenticated\n        if (Auth::check()) {\n            $user = Auth::user();\n            // Grabbing Gravatar\n            $gravatar = Trickster::gravatar($user->email, '200');\n         }\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n}\n\n\n\n\n\nIf you want to use Trickster inside a view file, call the \nTrickster\n method directly. That is the advantage of Facade.\n\n\nFor example:\n\n{!! Trickster::bbcode($user->bio) !!}\n\nor\n\n{{ Trickster::truncator($blog->desc, '150', '(...summary)') }}",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "To start using  Trickster , you will be needed to set it up first. Follow the below steps to setup  Trickster :",
            "title": "Usage"
        },
        {
            "location": "/usage/#1-service-provider",
            "text": "You will be needing to add the Trickster Service Provider in your  app.php  which is inside the  config  directory.   Open  config\\app.php  Find  'providers'  At the last of this array in  Application Service Providers  add  Secrethash\\Trickster\\TricksterServiceProvider::class,",
            "title": "1. Service Provider"
        },
        {
            "location": "/usage/#2-facade",
            "text": "To use  Trickster  flexibly, you need to add the Facade also. Facade will let you use Trickster directly. All you will need to do is add  use Trickster;  at the head of the controller below namespace and use it by  Trickster::trickName();  Lets Add the  Trickster  Facade:   Open  config\\app.php  Find  'aliases'  array.  At the end of this array, add  'Trickster' => Secrethash\\Trickster\\Facade\\Trickster::class,",
            "title": "2. Facade"
        },
        {
            "location": "/usage/#3-configuration",
            "text": "First of all you will need to run the following command in your console: php artisan vendor:publish --provider=\"Secrethash\\Trickster\\TricksterServiceProvider\"   This command will publish the  trickster.php  configuration file for Trickster to your application default  config  directory.   From  config\\trickster.php  you can edit the default configurations.",
            "title": "3. Configuration"
        },
        {
            "location": "/usage/#4-ready-steady-go",
            "text": "You are almost done. Now what to do when you want to use a Trickster's Trick?  Here is a sample Controller to show you how to add Trickster and Use it:  <?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\n\nuse Auth;\nuse Trickster; // Simply add the Facade\n\nclass TricksterDemoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //checking if the user is Authenticated\n        if (Auth::check()) {\n            $user = Auth::user();\n            // Grabbing Gravatar\n            $gravatar = Trickster::gravatar($user->email, '200');\n         }\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n}  If you want to use Trickster inside a view file, call the  Trickster  method directly. That is the advantage of Facade.  For example: {!! Trickster::bbcode($user->bio) !!} \nor {{ Trickster::truncator($blog->desc, '150', '(...summary)') }}",
            "title": "4. Ready, Steady, GO!"
        },
        {
            "location": "/tricks/",
            "text": "Trickster's Tricks\n\n\n1. Truncator\n\n\nTruncate is a Text Truncator. It Truncates the text and enable you to add ellipses(...) or desired line at the end. For example:\n\n\n\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those inter \n(read more...)\n\n\n\n\nJust call the Trickster and provide it with details of the given parameters.\n\n\nTrickster::truncator('Supplied text is written here, can also be given in a variable; lets leave it simple.', 30, '(read more...)');\n// Output: Supplied text is written here, (read more...)\n\n\n\n\n2. Email Validator\n\n\nEmail Validator gives you the power of validating the email address by just a simple line of code: \n\n\nTrickster::emailValid('someone@example.com');\n\n\n\n\nWith Trickster by your side you will not have to write the validation code again and again. Just mention the Facade of Trickster an the validation function that's it.\n\n\n3. Slug Converter\n\n\nSlug Converter makes your life easy for creating search engine friendly slug for your url.\n\n\n\n\nFor example: \nText\n: \nAre search engines friendly to search engines?\n\n\n\n\nSLUGish URL\n: \nexample.com/are-search-engines-friendly-to-search-engines\n\n\n\n\n\n\nCOOL HUH?\n\n\nIt is really very simple with Trickster. Just call Trickster and specify the slug function, provide in the text and Ta-DA!\n\n\nTrickster::slug('Are search engines friendly to search engines?'); // Just One Line!\n//-> OR\n$slug = 'Are search engines friendly to search engines?';\n$slug = Trickster::slug($slug); // That's it!\n\n\n\n\n4. YouTube Embed\n\n\nYouTube Embedding can never be more easier! Embed YouTube Videos without writing lines of code just tell the Trickster about it. Call Trickster by:\n\n\nTrickster::youtube('VIDEO URL', 'FRAME WIDTH', 'FRAME HEIGHT', 'FRAME THEME');\n//OR LEAVE EVERYTHING ELSE FOR DEFAULT VALUES, JUST PUT THE LINK\nTrickster::youtube('VIDEO URL');\n\n\n\n\nDEFAULT VALUES:\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nRequired\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nVideo URL\n\n\nURL to the YouTube video\n\n\nYES\n\n\nNO\n\n\n\n\n\n\nFrame Width\n\n\nWidth of the video Frame\n\n\nNO\n\n\n400\n\n\n\n\n\n\nFrame Height\n\n\nHeight of the Video frame\n\n\nNO\n\n\n250\n\n\n\n\n\n\nFrame Theme\n\n\ndark\n or \nlight\n theme\n\n\nNO\n\n\ndark\n\n\n\n\n\n\n\n\n5. Gravatar Grabber\n\n\nThis amazing trick helps you to easily get the gravatar in the desired \nsize\n, with desired \nrating\n. Not only that, but it also helps you to set the desired \ndefault image\n in case the grabbing fails. Not yet finished, two more amazing features; allows you to \nset the option of returning only the url of the gravatar or even the gravatar with the whole \n<img />\n tag\n and in case you want Trickster to return the whole \nimg\n tag then you also have the option of \nsetting desired attributes in an array \n(ex. below)\n.\n\n\nTrickster::gravatar('example@email.com', '200', 'monsterid', 'r', 'true', array('class'=>'img-class', 'key'=>'value'));\n\n\n\n\nThe Parameters Explained:\n\n\n\n\nEmail Address\n: Just simple email address. \nNO DEFAULT\n, \nREQUIRED\n.\n\n\nSize\n: Size of image in pixels. \nDEFAULT: 100\n, \nNOT REQUIRED\n.\n\n\nDefault image\n: Default Image like \nmm\n(mystery man), \nmonsterid\n, \nidenticon\n, \nwavatar\n, 404. \nDEFAULT: mm\n, \nNOT REQUIRED\n.\n\n\nRating\n: Image Max Rating (for ex. \ng\n, \npg\n, \nr\n, \nx\n). \nDEFAULT: g\n, \nNOT REQUIRED\n.\n\n\n<img />\n: Do you want full HTML image tag? This parameter should be supplied with boolean value (TRUE/FALSE). \nDEFAULT: false\n, \nNOT REQUIRED\n.\n\n\nKey-Value Attributes\n: An array is to be passed to defined any special attributes required by the html image tag, if requested. \nNO DEFAULT\n, \nNOT REQUIRED\n\n\n\n\n6. Extension Splitter\n\n\nThis simple trick splits the file extension of the file supplied as the parameter and returns it. Simply call the Trickster and provide the full file name, the trick will split the file ext. from the file name and return it.\n\n\nTrickster::getExtension('really-funny.image.jpg');\n\n\n\n\nFinished? Not Yet!\n\n\n7. Simple Social Analytics\n\n\nThis trick eases your life, seriously. Simple and easy it is to show your social counts with Trickster. Trickster's Simple Social Analytics shows the number of Shares or Comments over a specific URL on Facebook when the trick is executed.\n\n\n\n\nNote: Twitter has been deprecated. As of 20th November 2015 there's no Tweet count API. \nKnow More\n\n\n\n\n\n\nSupported Social Networks:\n\n\nFacebook\n\n\n~~Twitter~~ (deprecated)\n\n\nReturned Strings\n\n\nFacebook\n\n\nShare Count\n\n\nComment Count\n\n\n\n\n\n\n~~Twitter~~\n\n\n~~Tweets~~\n\n\n\n\n\n\n\n\n$fbAnalytics = Trickster::social('facebook', 'http://github.com/secrethash');\necho $fbAnalytics['share_count'].' Shares of Github.com/secrethash';\necho $fbAnalytics['comment_count'].' Comments on Github.com/secrethash';\n\n\n\n\n\n\nOutput 1: 95457821 Shares of Github.com/secrethash\nOutput 2: 59865231 Comments on Github.com/secrethash\n\n\n\n\n(Don't be bothered about the numbers, they are just random :-P )\n\n\nBTW Simple, right?\n\n\n8. BB Code Engine\n\n\nBB code engine trick is a little distinctive. It's actually amazing. It makes easy to convert the BB Code to HTML format. Easy to initialize, it makes it unique.\n\n\n// If implemented directly in the  Blade View File.\n{!! Trickster::bbcode($user->bio) !!}\n\n\n\n\nThe Supported BB Codes Currently are: \n\n\n\n\n\n\n\n\nBB Code\n\n\nDescription\n\n\nConverted HTML\n\n\n\n\n\n\n\n\n\n\n[b]...[/b]\n\n\nBold Text\n\n\n<b>...</b>\n\n\n\n\n\n\n[i]...[/i]\n\n\nItalics Text\n\n\n<i>...</i>\n\n\n\n\n\n\n[u]...[/u]\n\n\nUnderlined\n\n\n<u>...</u>\n\n\n\n\n\n\n[img=url]alt[/img]\n\n\nImage Implementation. Where: url is the image url & alt is alternate text.\n\n\n<img src=\"#url\" alt=\"Alternate Text\" />\n\n\n\n\n\n\n[youtube]id[/youtube]\n\n\nYoutube Embed. Where id is the Video ID of youtube video.\n\n\nYouTube video frame of width 400px & height 250px\n\n\n\n\n\n\n[vimeo]id[/vimeo]\n\n\nVimeo Embed. Where id is the Video ID of Vimeo video.\n\n\nVimeo video frame of width 400px & height 250px\n\n\n\n\n\n\n[p]...[/p]\n\n\nParagraph.\n\n\n<p>...</p>\n\n\n\n\n\n\n[br/]\n\n\nLine Break\n\n\n<br/>\n\n\n\n\n\n\n[url=URL]ALT[/url]\n\n\nAdding a URL. Where: URL is the Target Link and ALT is the URL text to be shown.\n\n\n<a href=\"#url\">Google</a>\n\n\n\n\n\n\n\n\n9. Tags Sweeper\n\n\nTag sweeper is a unwanted tag remover trick. It easily removes the unwanted script tags from the provided string. In accordance to the BB Code Engine,  Tag Sweeper Cleans the HTML \n<script></script>\n code and leaves the BB Code making the supplied text \nClean and Safe\n.\n\n\nTrickster::clean($string);\n\n\n\n\n10. Time Ago\n\n\nTime ago\n is a wonderful way of displaying the post time. You can use the Trickster's Facade \nTrickster\n to convert easily the provided Time & Date to Time Ago. The default format for this is \nY-m-d H:i:s\n. In simple words \n1996-07-30 21:52:30\n, \nYear-Month-Day Hour:Min:Sec\n\n\n\n\nFor example: \nThis repo was created 2 months ago\n\n\n\n\nTrick:\n\n\nTrickster::timeAgo('1996-07-30 21:52:30');\n\n\n\n\n11. Cipher\n\n\nCipher enables you to encrypt any provided string of plain text to convert into Encrypted text form. Any PHP supported algorithm can be provided to \nCipher\n to encrypt it. You can also encrypt a string and add a \nSalt\n to make it more secure. One will need the \nSalt\n to decrypt it.\n\n\nTrickster::encryptString('SHA1', 'Text to Encrypt', 'Desired Salt');\n\n\n\n\n12. Vimeo Video Embed\n\n\nVimeo Video Embed, same as YouTube Video Embed. It needs the video link of Vimeo Video as an input. Same as Youtube Embed you can set custom width and height in it also. \n\n\nTrickster::vimeo('https://vimeo.com/30626474', '400', '250');\n//-> OR, Simple <-//\nTrickster::vimeo('https://vimeo.com/30626474');\n\n\n\n\n13. Video Info Grabber\n\n\nA great way of getting the video information from \nYouTube and Vimeo\n. \nVideo Info Grabber\n makes it easy for you to grab the video info from link of YouTube & Vimeo video portals and return an array containing the video info. Returning as an array gives you the flexibility to use the info as you want.\n\n\nTrickster::getVideoInfo('https://vimeo.com/30626474');\n\n\n\n\n// Output\nArray\n(\n    [title] => The Official Space Ibiza Closing Party 2011 Video\n    [description] => \n    [thumbnail] => http://i1.ytimg.com/vi/AL-QX0wj44A/default.jpg\n    [duration] => 962\n    [upload_date] => 2011-11-05 02:11:05\n)\n\n\n\n\n14. Wikipedia Grabber\n\n\nThis simple trick helps you to get the \nWikipedia version definition\n of a particular keyword. Just pass the key word as the input to this function of \nTrickster\n and get the definition right away as return string. Remember, like the above function this one also returns an array as it returns not only definition but also the input value and the link to Wikipedia, where that definition is. The example is well explained below:\n\n\nTrickster::wiki('github');\n\n\n\n\n// Returns\nArray\n(\n    [0] => GitHub\n    [1] => GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features. \n    [2] => http://en.wikipedia.org/wiki/GitHub\n)\n\n\n\n\n\nSo if you only want to display the definition of \nGitHub\n as shown in the above example:\n\n\n$trick = Trickster::wiki('github');\necho $trick[1];\n\n\n\n\n15. URL Shortener\n\n\nURL shortener make your url short using the Google's goo.gl API and TinyURL API. Make your life simple with just one liner URL Shortener that can shorten the URL using 2 distinctive APIs.\n\n\n// Google's URL Shortener\nTrickster::shortenUrl('http://github.io', 'google');\n\n// TinyURL URL Shortener\nTrickster::shortenUrl('http://github.com', 'tinyurl');\n\n\n\n\n16. Suggest\n\n\nSuggest uses the Google Suggest API to get the keyword suggestions. Just provide the input of the keyword that you want the suggestions for as the first parameter and the results will be generated and returned as an array.\n\n\nTrickster::suggest('break');\n\n\n\n\n// Output\n\n\nArray\n(\n    [0] => breaking\n    [1] => breaking bad\n    [2] => break the glass\n    [3] => break plan\n    [4] => breaking bad imdb\n    [5] => kitkat break\n    [6] => break the bones\n    [7] => breakthrough\n    [8] => breaking benjamin\n    [9] => breakup\n)\n\n\n\n\n17. IP Grabber\n\n\nGrabs the user's IP address. Simple but useful.\n\n\nTrickster::ip();\n// Output: 192.168.145.35\n\n\n\n\n18. Currency Converter\n\n\nWith the help of \nCURL\n and \nGoogle\n the currency is converted using the live exchange rate. Trickster's \nTrickster::currencyConvert()\n can convert currency within seconds using the Currency Codes.\n\n\nThe Currency Converter excepts three Parameters with last an optional one.\n\n\nParameters & Inputs:\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\nValue\n\n\nDefault\n\n\nAccepts\n\n\n\n\n\n\n\n\n\n\nAmount\n\n\nThe amount to convert\n\n\nInteger\n\n\n------\n\n\nCurrency Amount\n\n\n\n\n\n\nFrom\n\n\nConvert Currency From\n\n\nString\n\n\n------\n\n\nCurrency Code\n\n\n\n\n\n\nTo\n\n\nConvert Currency To\n\n\nString\n\n\nINR\n\n\nCurrency Code\n\n\n\n\n\n\n\n\n\n\nINR\n is the Currency Code for \nIndian National Rupee\n\n\n\n\n    /**\n    * Sample Code\n    * @param $amount init Amount to convert\n    * @param $from string Currency Code\n    * @param $to string Currency Code\n    * @return string - converted amount\n    **/\n\n    $amount = 100;\n    $from = \"USD\";\n    $to = \"INR\";\n    $convert = Trickster::currencyConvert($amount, $from, $to);\n    echo $convert;\n\n\n\n\noutput: 60,000 //In INR (Just an Example).",
            "title": "Tricks"
        },
        {
            "location": "/tricks/#tricksters-tricks",
            "text": "",
            "title": "Trickster's Tricks"
        },
        {
            "location": "/tricks/#1-truncator",
            "text": "Truncate is a Text Truncator. It Truncates the text and enable you to add ellipses(...) or desired line at the end. For example:   The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those inter  (read more...)   Just call the Trickster and provide it with details of the given parameters.  Trickster::truncator('Supplied text is written here, can also be given in a variable; lets leave it simple.', 30, '(read more...)');\n// Output: Supplied text is written here, (read more...)",
            "title": "1. Truncator"
        },
        {
            "location": "/tricks/#2-email-validator",
            "text": "Email Validator gives you the power of validating the email address by just a simple line of code:   Trickster::emailValid('someone@example.com');  With Trickster by your side you will not have to write the validation code again and again. Just mention the Facade of Trickster an the validation function that's it.",
            "title": "2. Email Validator"
        },
        {
            "location": "/tricks/#3-slug-converter",
            "text": "Slug Converter makes your life easy for creating search engine friendly slug for your url.   For example:  Text :  Are search engines friendly to search engines?   SLUGish URL :  example.com/are-search-engines-friendly-to-search-engines    COOL HUH?  It is really very simple with Trickster. Just call Trickster and specify the slug function, provide in the text and Ta-DA!  Trickster::slug('Are search engines friendly to search engines?'); // Just One Line!\n//-> OR\n$slug = 'Are search engines friendly to search engines?';\n$slug = Trickster::slug($slug); // That's it!",
            "title": "3. Slug Converter"
        },
        {
            "location": "/tricks/#4-youtube-embed",
            "text": "YouTube Embedding can never be more easier! Embed YouTube Videos without writing lines of code just tell the Trickster about it. Call Trickster by:  Trickster::youtube('VIDEO URL', 'FRAME WIDTH', 'FRAME HEIGHT', 'FRAME THEME');\n//OR LEAVE EVERYTHING ELSE FOR DEFAULT VALUES, JUST PUT THE LINK\nTrickster::youtube('VIDEO URL');  DEFAULT VALUES:     Parameters  Description  Required  Value      Video URL  URL to the YouTube video  YES  NO    Frame Width  Width of the video Frame  NO  400    Frame Height  Height of the Video frame  NO  250    Frame Theme  dark  or  light  theme  NO  dark",
            "title": "4. YouTube Embed"
        },
        {
            "location": "/tricks/#5-gravatar-grabber",
            "text": "This amazing trick helps you to easily get the gravatar in the desired  size , with desired  rating . Not only that, but it also helps you to set the desired  default image  in case the grabbing fails. Not yet finished, two more amazing features; allows you to  set the option of returning only the url of the gravatar or even the gravatar with the whole  <img />  tag  and in case you want Trickster to return the whole  img  tag then you also have the option of  setting desired attributes in an array  (ex. below) .  Trickster::gravatar('example@email.com', '200', 'monsterid', 'r', 'true', array('class'=>'img-class', 'key'=>'value'));  The Parameters Explained:   Email Address : Just simple email address.  NO DEFAULT ,  REQUIRED .  Size : Size of image in pixels.  DEFAULT: 100 ,  NOT REQUIRED .  Default image : Default Image like  mm (mystery man),  monsterid ,  identicon ,  wavatar , 404.  DEFAULT: mm ,  NOT REQUIRED .  Rating : Image Max Rating (for ex.  g ,  pg ,  r ,  x ).  DEFAULT: g ,  NOT REQUIRED .  <img /> : Do you want full HTML image tag? This parameter should be supplied with boolean value (TRUE/FALSE).  DEFAULT: false ,  NOT REQUIRED .  Key-Value Attributes : An array is to be passed to defined any special attributes required by the html image tag, if requested.  NO DEFAULT ,  NOT REQUIRED",
            "title": "5. Gravatar Grabber"
        },
        {
            "location": "/tricks/#6-extension-splitter",
            "text": "This simple trick splits the file extension of the file supplied as the parameter and returns it. Simply call the Trickster and provide the full file name, the trick will split the file ext. from the file name and return it.  Trickster::getExtension('really-funny.image.jpg');  Finished? Not Yet!",
            "title": "6. Extension Splitter"
        },
        {
            "location": "/tricks/#7-simple-social-analytics",
            "text": "This trick eases your life, seriously. Simple and easy it is to show your social counts with Trickster. Trickster's Simple Social Analytics shows the number of Shares or Comments over a specific URL on Facebook when the trick is executed.   Note: Twitter has been deprecated. As of 20th November 2015 there's no Tweet count API.  Know More    Supported Social Networks:  Facebook  ~~Twitter~~ (deprecated)  Returned Strings  Facebook  Share Count  Comment Count    ~~Twitter~~  ~~Tweets~~     $fbAnalytics = Trickster::social('facebook', 'http://github.com/secrethash');\necho $fbAnalytics['share_count'].' Shares of Github.com/secrethash';\necho $fbAnalytics['comment_count'].' Comments on Github.com/secrethash';   Output 1: 95457821 Shares of Github.com/secrethash\nOutput 2: 59865231 Comments on Github.com/secrethash   (Don't be bothered about the numbers, they are just random :-P )  BTW Simple, right?",
            "title": "7. Simple Social Analytics"
        },
        {
            "location": "/tricks/#8-bb-code-engine",
            "text": "BB code engine trick is a little distinctive. It's actually amazing. It makes easy to convert the BB Code to HTML format. Easy to initialize, it makes it unique.  // If implemented directly in the  Blade View File.\n{!! Trickster::bbcode($user->bio) !!}  The Supported BB Codes Currently are:      BB Code  Description  Converted HTML      [b]...[/b]  Bold Text  <b>...</b>    [i]...[/i]  Italics Text  <i>...</i>    [u]...[/u]  Underlined  <u>...</u>    [img=url]alt[/img]  Image Implementation. Where: url is the image url & alt is alternate text.  <img src=\"#url\" alt=\"Alternate Text\" />    [youtube]id[/youtube]  Youtube Embed. Where id is the Video ID of youtube video.  YouTube video frame of width 400px & height 250px    [vimeo]id[/vimeo]  Vimeo Embed. Where id is the Video ID of Vimeo video.  Vimeo video frame of width 400px & height 250px    [p]...[/p]  Paragraph.  <p>...</p>    [br/]  Line Break  <br/>    [url=URL]ALT[/url]  Adding a URL. Where: URL is the Target Link and ALT is the URL text to be shown.  <a href=\"#url\">Google</a>",
            "title": "8. BB Code Engine"
        },
        {
            "location": "/tricks/#9-tags-sweeper",
            "text": "Tag sweeper is a unwanted tag remover trick. It easily removes the unwanted script tags from the provided string. In accordance to the BB Code Engine,  Tag Sweeper Cleans the HTML  <script></script>  code and leaves the BB Code making the supplied text  Clean and Safe .  Trickster::clean($string);",
            "title": "9. Tags Sweeper"
        },
        {
            "location": "/tricks/#10-time-ago",
            "text": "Time ago  is a wonderful way of displaying the post time. You can use the Trickster's Facade  Trickster  to convert easily the provided Time & Date to Time Ago. The default format for this is  Y-m-d H:i:s . In simple words  1996-07-30 21:52:30 ,  Year-Month-Day Hour:Min:Sec   For example:  This repo was created 2 months ago   Trick:  Trickster::timeAgo('1996-07-30 21:52:30');",
            "title": "10. Time Ago"
        },
        {
            "location": "/tricks/#11-cipher",
            "text": "Cipher enables you to encrypt any provided string of plain text to convert into Encrypted text form. Any PHP supported algorithm can be provided to  Cipher  to encrypt it. You can also encrypt a string and add a  Salt  to make it more secure. One will need the  Salt  to decrypt it.  Trickster::encryptString('SHA1', 'Text to Encrypt', 'Desired Salt');",
            "title": "11. Cipher"
        },
        {
            "location": "/tricks/#12-vimeo-video-embed",
            "text": "Vimeo Video Embed, same as YouTube Video Embed. It needs the video link of Vimeo Video as an input. Same as Youtube Embed you can set custom width and height in it also.   Trickster::vimeo('https://vimeo.com/30626474', '400', '250');\n//-> OR, Simple <-//\nTrickster::vimeo('https://vimeo.com/30626474');",
            "title": "12. Vimeo Video Embed"
        },
        {
            "location": "/tricks/#13-video-info-grabber",
            "text": "A great way of getting the video information from  YouTube and Vimeo .  Video Info Grabber  makes it easy for you to grab the video info from link of YouTube & Vimeo video portals and return an array containing the video info. Returning as an array gives you the flexibility to use the info as you want.  Trickster::getVideoInfo('https://vimeo.com/30626474');  // Output\nArray\n(\n    [title] => The Official Space Ibiza Closing Party 2011 Video\n    [description] => \n    [thumbnail] => http://i1.ytimg.com/vi/AL-QX0wj44A/default.jpg\n    [duration] => 962\n    [upload_date] => 2011-11-05 02:11:05\n)",
            "title": "13. Video Info Grabber"
        },
        {
            "location": "/tricks/#14-wikipedia-grabber",
            "text": "This simple trick helps you to get the  Wikipedia version definition  of a particular keyword. Just pass the key word as the input to this function of  Trickster  and get the definition right away as return string. Remember, like the above function this one also returns an array as it returns not only definition but also the input value and the link to Wikipedia, where that definition is. The example is well explained below:  Trickster::wiki('github');  // Returns\nArray\n(\n    [0] => GitHub\n    [1] => GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features. \n    [2] => http://en.wikipedia.org/wiki/GitHub\n)  So if you only want to display the definition of  GitHub  as shown in the above example:  $trick = Trickster::wiki('github');\necho $trick[1];",
            "title": "14. Wikipedia Grabber"
        },
        {
            "location": "/tricks/#15-url-shortener",
            "text": "URL shortener make your url short using the Google's goo.gl API and TinyURL API. Make your life simple with just one liner URL Shortener that can shorten the URL using 2 distinctive APIs.  // Google's URL Shortener\nTrickster::shortenUrl('http://github.io', 'google');\n\n// TinyURL URL Shortener\nTrickster::shortenUrl('http://github.com', 'tinyurl');",
            "title": "15. URL Shortener"
        },
        {
            "location": "/tricks/#16-suggest",
            "text": "Suggest uses the Google Suggest API to get the keyword suggestions. Just provide the input of the keyword that you want the suggestions for as the first parameter and the results will be generated and returned as an array.  Trickster::suggest('break');  // Output\n\n\nArray\n(\n    [0] => breaking\n    [1] => breaking bad\n    [2] => break the glass\n    [3] => break plan\n    [4] => breaking bad imdb\n    [5] => kitkat break\n    [6] => break the bones\n    [7] => breakthrough\n    [8] => breaking benjamin\n    [9] => breakup\n)",
            "title": "16. Suggest"
        },
        {
            "location": "/tricks/#17-ip-grabber",
            "text": "Grabs the user's IP address. Simple but useful.  Trickster::ip();\n// Output: 192.168.145.35",
            "title": "17. IP Grabber"
        },
        {
            "location": "/tricks/#18-currency-converter",
            "text": "With the help of  CURL  and  Google  the currency is converted using the live exchange rate. Trickster's  Trickster::currencyConvert()  can convert currency within seconds using the Currency Codes.  The Currency Converter excepts three Parameters with last an optional one.  Parameters & Inputs:     Parameters  Description  Value  Default  Accepts      Amount  The amount to convert  Integer  ------  Currency Amount    From  Convert Currency From  String  ------  Currency Code    To  Convert Currency To  String  INR  Currency Code      INR  is the Currency Code for  Indian National Rupee       /**\n    * Sample Code\n    * @param $amount init Amount to convert\n    * @param $from string Currency Code\n    * @param $to string Currency Code\n    * @return string - converted amount\n    **/\n\n    $amount = 100;\n    $from = \"USD\";\n    $to = \"INR\";\n    $convert = Trickster::currencyConvert($amount, $from, $to);\n    echo $convert;  output: 60,000 //In INR (Just an Example).",
            "title": "18. Currency Converter"
        }
    ]
}